counter <- 1
for (i in backgrounds) {
Data <- Chisqs[which(results[,3] ==i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline(v=11.70, lty=2, lwd=2, col='black' )
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation3 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0, 0.25))
Simulation4 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit <- c(0.1,0.1,0.1,0.1,0.1,1)
names(Fit) <-1:6
Simulation6 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel.sim")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s= 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend=c("a", "b"), col=c("black","red"), lwd=2, bty="n")
plotFit(nruns=10, n=50, ngens=100, init_p=0.5, h=1, s=0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 15, 15)
Chisq <- sum(((Expectation - Observed)^2)/Expectation)
barplot (rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~"="~. (Chisq)), legend.text=c("expected", "observed"))
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
setwd('~/OneDrive/Desktop/Evolution/Tasks/Tasks05')
libary(adegenet)
library(adegenet)
install.packages("library(adegenet)")
install.packages("library(poppr)")
install.packages("library(dplyr)")
install.packages("library(hierfstat)")
install.packages("library(reshape2)")
install.packages("library(ggplot2)")
install.packages("library(RColorBrewer)")
install.packages("library(scales)")
lobster<-read.csv("http://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide<-reshape(lobster,idvar=c("ID","Site"), timevar="Locus", direction="wide", sep "")
lobster_wide <- reshape(lobster,idvar =c("ID","Site"), timevar ="Locus", direction ="wide", sep "")
lobster_wide <- reshape(lobster,idvar =c("ID","Site"), timevar ="Locus", direction ="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype","",)colnames(lobster_wide))snpgeno<-lobster_wide[,3:ncol(lobster_wide)]
colnames(lobster_wide)<-gsub("Genotype","",) colnames(lobster_wide))snpgeno<-lobster_wide[ , 3:ncol(lobster_wide)]
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))snpgeno <-lobster_wide[ , 3:ncol(lobster_wide)]
install.packages("learnPopGen","adegenet", "poppr","dplyr","hierfstat","reshape2","ggplot2", "RColorBrewer","scales")
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
snps_to_remove<- c("25580", "32362", "41521", "53889", "65376", "8953","21197", "15531", "22740", "28357","33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
snp<-lobster_wide[, 3:ncol(lobster_wide)]
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$site)
lobster_gen<-df2genind(snpgeno, ploidy = 2, ind.names = ind, pop=site, sep = "")
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
site<-as.character(lobster_wide$Site)
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind., pop = site, sep = "")
lobster_gen <- df2genind (snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
install.packages("learnPopGen","adegenet", "poppr","dplyr","hierfstat","reshape2","ggplot2", "RColorBrewer","scales")
library(adegenet)
library(RColorBrewer)
library(scales)
install.packages("learnPopGen","adegenet", "poppr","dplyr","hierfstat","reshape2","ggplot2", "RColorBrewer","scales")
library(adegenet)
install.packages("library(adegenet)")
library(adegenet)
library(adegenet)
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster<-read.csv("http://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide <- reshape(lobster,idvar =c("ID","Site"), timevar ="Locus", direction ="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snps_to_remove<- c("25580", "32362", "41521", "53889", "65376", "8953","21197", "15531", "22740", "28357","33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$Site)
lobster_gen <- df2genind (snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- missingno(lobster_gen, type = "geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for (i in dups_lobster){
if(length(dups_lobster[i])>1){
lob_dups[x]<-i
x <- x+1
}
}
lob_Nodups <-indNames(lobster_gen)[! indNames(lobster_gen)%in% lob_dups]
lobster_gen <- lobster_gen[lob_Nodups,]
summary(lobster_gen$pop)
basic_lobster <- basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster <- round(apply(basic_lobster$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE), digits=3)
He_lobster <- round(apply(bagsic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm =TRUE), digits=3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm =TRUE), digits=3)
par(mar=c(4,4,1,1), las=1, mgp=c(2,0.25,0), tck=0-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray",xlim=c(0.32, 0.405), ylim=c(0.32,0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster),lty=2, lwd=1.25, col'red')
abline(lm(Ho_lobster~He_lobster),lty=2, lwd=1.25, col='red')
Fis<-apply(basic_lobster$Fis, MARGIN = 2, FUN = mean, na.rm = TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist = c("Ale", "Ber", "Brd","Pad","Sar17","Vig"))
lobster_fst <- genet.dist(lobster_gen_sub, method_"WC84") %>% round(digits = 3)
lobster_fst <- genet.dist(lobster_gen_sub, method = "WC84") %>% round(digits = 3)
lab_order <-c("Ber","Brd","Pad","Vig","Sar17","Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[, lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1=dimnames(fst.mat2)[[2]][ind[,2]], Site2 = dimnames(fst.mat2)[[1]][ind[,1]],Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1, levels = unique(fst.df$Site1))
fst.df$Site2<-factor(fst.df$Site2, levels = unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst<0] <- 0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$FSt)/2
ggplot(data=fst.df,aes(x=Site1,y=Site2, fill = FST))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color = "black", size=3)+
scale_fill_gradient2(low="blue",mid="pink",high="red", breaks = midpoint=mid, name=fst.label,limits=c(0,max(fst.df$Fst)), breaks=c(0,0.05,0.10,0.15))+scale_x_discrete(expand=c(0,0))+
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster<-read.csv("http://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide <- reshape(lobster,idvar =c("ID","Site"), timevar ="Locus", direction ="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snps_to_remove<- c("25580", "32362", "41521", "53889", "65376", "8953","21197", "15531", "22740", "28357","33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$Site)
lobster_gen <- df2genind (snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- missingno(lobster_gen, type = "geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for (i in dups_lobster){
if(length(dups_lobster[i])>1){
lob_dups[x]<-i
x <- x+1
}
}
lob_Nodups <-indNames(lobster_gen)[! indNames(lobster_gen)%in% lob_dups]
lobster_gen <- lobster_gen[lob_Nodups,]
summary(lobster_gen$pop)
basic_lobster <- basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster <- round(apply(basic_lobster$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE), digits=3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm =TRUE), digits=3)
par(mar=c(4,4,1,1), las=1, mgp=c(2,0.25,0), tck=0-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray",xlim=c(0.32, 0.405), ylim=c(0.32,0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster),lty=2, lwd=1.25, col='red')
Fis<-apply(basic_lobster$Fis, MARGIN = 2, FUN = mean, na.rm = TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist = c("Ale", "Ber", "Brd","Pad","Sar17","Vig"))
lobster_fst <- genet.dist(lobster_gen_sub, method = "WC84") %>% round(digits = 3)
lab_order <-c("Ber","Brd","Pad","Vig","Sar17","Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[, lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1=dimnames(fst.mat2)[[2]][ind[,2]], Site2 = dimnames(fst.mat2)[[1]][ind[,1]],Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1, levels = unique(fst.df$Site1))
fst.df$Site2<-factor(fst.df$Site2, levels = unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst<0] <- 0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$FSt)/2
ggplot(data=fst.df,aes(x=Site1,y=Site2, fill = FST))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color = "black", size=3)+
scale_fill_gradient2(low="blue",mid="pink",high="red",
midpoint=mid, name=fst.label,limits=c(0,max(fst.df$Fst)),
breaks=c(0,0.05,0.10,0.15))+
scale_x_discrete(expand=c(0,0))+
ggplot(data=fst.df,aes(x=Site1,y=Site2, fill = Fst))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color = "black", size=3)+
scale_fill_gradient2(low="blue",mid="pink",high="red",
midpoint=mid, name=fst.label,limits=c(0, max(fst.df$Fst)),
breaks=c(0, 0.05, 0.10, 0.15))+
scale_x_discrete(expand=c(0,0))+
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster<-read.csv("http://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide <- reshape(lobster,idvar =c("ID","Site"), timevar ="Locus", direction ="wide", sep = "")
colnames(lobster_wide)<-gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snps_to_remove<- c("25580", "32362", "41521", "53889", "65376", "8953","21197", "15531", "22740", "28357","33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno<-snpgeno[, !colnames(snpgeno) %in% snps_to_remove]
ind<-as.character(lobster_wide$ID)
site<-as.character(lobster_wide$Site)
lobster_gen <- df2genind (snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- missingno(lobster_gen, type = "geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for (i in dups_lobster){
if(length(dups_lobster[i])>1){
lob_dups[x]<-i
x <- x+1
}
}
lob_Nodups <-indNames(lobster_gen)[! indNames(lobster_gen)%in% lob_dups]
lobster_gen <- lobster_gen[lob_Nodups,]
summary(lobster_gen$pop)
basic_lobster <- basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster <- round(apply(basic_lobster$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE), digits=3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm =TRUE), digits=3)
par(mar=c(4,4,1,1), las=1, mgp=c(2,0.25,0), tck=0-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray",xlim=c(0.32, 0.405), ylim=c(0.32,0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster),lty=2, lwd=1.25, col='red')
Fis<-apply(basic_lobster$Fis, MARGIN = 2, FUN = mean, na.rm = TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist = c("Ale", "Ber", "Brd","Pad","Sar17","Vig"))
lobster_fst <- genet.dist(lobster_gen_sub, method = "WC84") %>% round(digits = 3)
lab_order <-c("Ber","Brd","Pad","Vig","Sar17","Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[, lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1=dimnames(fst.mat2)[[2]][ind[,2]], Site2 = dimnames(fst.mat2)[[1]][ind[,1]],Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1, levels = unique(fst.df$Site1))
fst.df$Site2<-factor(fst.df$Site2, levels = unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst<0] <- 0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$FSt)/2
ggplot(data=fst.df,aes(x=Site1,y=Site2, fill = Fst))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color = "black", size=3)+
scale_fill_gradient2(low="blue",mid="pink",high="red",
midpoint=mid, name=fst.label,limits=c(0, max(fst.df$Fst)),
breaks=c(0, 0.05, 0.10, 0.15))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0), position="right")+
theme(axis.text=element_text(colour="black",size=10,face="bold"),
axis.title=element_blank(),
panel.grid=element_blank(),
panel.background=element_blank(),
legend.position="right",
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=10)
)
ggplot(data=fst.df,aes(x=Site1,y=Site2, fill = Fst))+
geom_tile(colour="black")+
geom_text(aes(label=Fst), color = "black", size=3)+
scale_fill_gradient2(low="blue",mid="pink",high="red",
midpoint=mid, name=fst.label,limits=c(0, max(fst.df$Fst)),
breaks=c(0, 0.05, 0.10, 0.15))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0), position="right")+
theme(axis.text=element_text(colour="black",size=10,face="bold"),
axis.title=element_blank(),
panel.grid=element_blank(),
panel.background=element_blank(),
legend.position="right",
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=10)
)
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1,1,type="n",xlim=c(1998,2013), ylim=c(0,1))
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
rescaleFreq<-apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1])
plot(1,1,type="n",xlim=c(1998,2013), ylim=c(-0.25, 0.25))
s <- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
dYear<-c()
dAlleles<-c()
for(i in 3:ncol(overallFreq)) {
dYear<-c(dYear, overallFreq[,1])
Vec <- overallFreq [,i]
Init <- overallFreq [1,i]
dAlleles<-c(dAlleles, Vec - Init)
}
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale = TRUE)
text.string <-
"(((((((cow,pig), whale), (bat, (lemur, human))), (robin, iguana)), coeclacanth
),(gold_fish, trout)), shark);"
vert.tree <- read.tree(text=text.string)
library(ape)
library(phytools)
text.string <-
"(((((((cow,pig), whale), (bat, (lemur, human))), (robin, iguana)), coeclacanth
),(gold_fish, trout)), shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white',cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E);")
plotTree(tree, offset=1)
tiplabels(frame="circle",bg='lightblue',cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab =""edge lengths for the Anolis tree", ylim=c(0,50), xlim=c(0,6))")
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab ="edge lengths for the Anolis tree", ylim=c(0,50), xlim=c(0,6))")
library(ape)
library(phytools)
text.string <-
"(((((((cow,pig), whale), (bat, (lemur, human))), (robin, iguana)), coeclacanth
),(gold_fish, trout)), shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white',cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E);")
plotTree(tree, offset=1)
tiplabels(frame="circle",bg='lightblue',cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab ="edge lengths for the Anolis tree", ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
plot(tree, type="fan")
data <- read.csv ("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(AnolisTree, svl, vars=TRUE, CI=TRUE)
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(AnolisTree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4,23.2,17.7,19.7,24,31)), tip1=c("Anolis_aliniger", "Anolis_anliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
Node <- fastMRCA(tree, fossilData[i, "tip1"]), fossilData[i, "tip2"])
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Node <- fastMRCA(AnolisTree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
for (i in 1:100)
for (i in 1:nrwo(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(Anolistree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
plot(Anolistree, type="fan")
plot(AnolisTree, type="fan")
data <- read.csv ("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(AnolisTree, svl, vars=TRUE, CI=TRUE)
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(AnolisTree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4,23.2,17.7,19.7,24,31)), tip1=c("Anolis_aliniger", "Anolis_anliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(Anolistree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
plot(obj, legend=0.7*max(nodeHeights(AnolisTree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4,23.2,17.7,19.7,24,31)), tip1=c("Anolis_aliniger", "Anolis_anliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(Anolistree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
?plot.phylo
plot(AnolisTree, cex=0.35, show.tip.label=FALSE)
eCols<-rep("black", 162)
eCols
(eCols[tipEdges]="red")
plot(AnolisTree, cex=0.25, type="fan", edge.col=eCols)
?which
which(AnolisTree=='minedge.length')
which(AnolisTree=='minedge.length')
which.min(AnolisTree$edge.length)
NewAnolisTree<-drop.tip(AnolisTree,82)
plot(NewAnolisTree, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
plot(AnolisTree, type="fan")
data <- read.csv ("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(AnolisTree, svl, vars=TRUE, CI=TRUE)
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree, svl, plot=F)
plot(obj, legend=0.7*max(nodeHeights(AnolisTree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4,23.2,17.7,19.7,24,31)), tip1=c("Anolis_aliniger", "Anolis_anliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(Anolistree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
}
Node <- fastMRCA(AnolisTree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Ancenstors_withFossils <- fastAnc(AnolisTree, svl, anc.states-fossilNodes, Cl = TRUE, var=TRUE)
Ancenstors_withFossils <- fastAnc(AnolisTree, svl, anc.states-fossilNodes, CL = TRUE, var=TRUE)
Ancenstors_withFossils <- fastAnc(AnolisTree, svl, anc.states=fossilNodes, C = TRUE, var=TRUE)
setwd('C:\\Users\\migma\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_10')
x <- rnorm(n = 100, mean = 0, variance = 4)
x <- rnorm(n = 100, mean = 0, var = 4)
x <- rnorm(n = 100, mean = 0, sd = 4)
x <- rnorm(n = 100, mean = 0, sd = 2)
y <- x * 5 + 2 + runif(100, min = 0, max = 0.1)
model <- lm(y ~ x)
summary(model)
slope <- vector("numeric", 100)
intercept <- vector("numeric", 100)
z <- vector("numeric", 100)
for (i in 1:100){
z[i] <- runif(1, min = 0.5, max = 2)
y < - x * 5 * z[i] + 2 + runif(100, min = 0, max = 0.1)
model <- lm(y ~x)
slope[i] <- coef(model)[2] * z[i]
intercept[i] <- coef(model)[1] * z[i] + 2
}
summary(model)
for (i in 1:100){
x <0 rnorm(n = 100, mean = 0, sd =2)
x <- rnorm(n = 100, mean = 0, sd =2)
for (i in 1:100){
x <- rnorm(n = 100, mean = 0, sd =2)
z[i] <- runif(1, min = 0.5, max = 2)
y < - x * 5 * z[i] + 2 + runif(100, min = 0, max = 0.1)
model <- lm(y ~x)
slope[i] <- coef(model)[2] * z[i]
intercept[i] <- coef(model)[1] * z[i] + 2
}
plot(z, slope, xlab = "z", ylab = "Estimated Slope")
abline(lm(slope ~ z), col = "blue")
